--------------------------------------------------------------------------------
-- GoldenGuard - DDL + DML de exemplo (Oracle 12c+)
-- Execute este script no SCHEMA usado pela API (ConnectionString da Web API).
--------------------------------------------------------------------------------

-------------------------
-- 0) CLEANUP (idempotente)
-------------------------
-- Drop índice (ignora erro se não existir)
BEGIN
  EXECUTE IMMEDIATE 'DROP INDEX IX_TX_USER_DATE';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE NOT IN (-1418, -942) THEN -- index não existe / objeto não existe
      RAISE;
    END IF;
END;
/
-- Drop tabelas na ordem filha -> pai (ignora erro se não existir)
BEGIN EXECUTE IMMEDIATE 'DROP TABLE USER_ACCOUNTS CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE TRANSACTIONS  CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE USERS         CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;
/

-------------------------
-- 1) USERS
-------------------------
CREATE TABLE USERS (
  ID              NUMBER GENERATED ALWAYS AS IDENTITY,
  NAME            VARCHAR2(120)      NOT NULL,
  EMAIL           VARCHAR2(200)      NOT NULL,
  MONTHLY_INCOME  NUMBER(12,2)       DEFAULT 0 NOT NULL,
  CREATED_AT      TIMESTAMP          DEFAULT SYSTIMESTAMP NOT NULL,
  CONSTRAINT PK_USERS        PRIMARY KEY (ID),
  CONSTRAINT UQ_USERS_EMAIL  UNIQUE (EMAIL),
  CONSTRAINT CK_USERS_INCOME_NONNEG CHECK (MONTHLY_INCOME >= 0)
);

-------------------------
-- 2) TRANSACTIONS
-------------------------
CREATE TABLE TRANSACTIONS (
  ID            NUMBER GENERATED ALWAYS AS IDENTITY,
  USER_ID       NUMBER            NOT NULL,
  OPERATOR      VARCHAR2(120)     NOT NULL, -- casa de apostas/operador
  KIND          VARCHAR2(30)      NOT NULL, -- DEPOSIT | WITHDRAWAL | OTHER
  AMOUNT        NUMBER(12,2)      NOT NULL,
  OCCURRED_AT   TIMESTAMP         NOT NULL,
  RAW_LABEL     VARCHAR2(300),
  CREATED_AT    TIMESTAMP         DEFAULT SYSTIMESTAMP NOT NULL,
  CONSTRAINT PK_TRANSACTIONS        PRIMARY KEY (ID),
  CONSTRAINT FK_TX_USER             FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
  CONSTRAINT CK_TX_KIND             CHECK (UPPER(KIND) IN ('DEPOSIT','WITHDRAWAL','OTHER')),
  CONSTRAINT CK_TX_AMOUNT_POSITIVE  CHECK (AMOUNT >= 0)
);

-- Índice de acesso por usuário/data
CREATE INDEX IX_TX_USER_DATE ON TRANSACTIONS (USER_ID, OCCURRED_AT);

-------------------------
-- 3) USER_ACCOUNTS (login)
-------------------------
CREATE TABLE USER_ACCOUNTS (
  ID            NUMBER GENERATED ALWAYS AS IDENTITY,
  USER_ID       NUMBER        NOT NULL,
  USERNAME      VARCHAR2(60)  NOT NULL,
  PASSWORD_HASH VARCHAR2(200) NOT NULL, -- DEV/APRENDIZADO: texto puro "123456" (use hash em produção)
  ROLE          VARCHAR2(20)  NOT NULL, -- admin | user
  CREATED_AT    TIMESTAMP     DEFAULT SYSTIMESTAMP NOT NULL,
  CONSTRAINT PK_USER_ACCOUNTS           PRIMARY KEY (ID),
  CONSTRAINT FK_UACC_USER               FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
  CONSTRAINT UQ_UACC_USERNAME           UNIQUE (USERNAME),
  CONSTRAINT CK_UACC_ROLE               CHECK (LOWER(ROLE) IN ('admin','user'))
);

--------------------------------------------------------------------------------
-- 4) DADOS DE EXEMPLO (USERS / USER_ACCOUNTS / TRANSACTIONS)
--------------------------------------------------------------------------------
DECLARE
  v_admin   NUMBER;
  v_marcio  NUMBER;
  v_demo    NUMBER;
  v_ana     NUMBER;
  v_bruno   NUMBER;
  v_carla   NUMBER;
  v_diego   NUMBER;
BEGIN
  -- USERS
  INSERT INTO USERS (NAME, EMAIL, MONTHLY_INCOME) VALUES ('Admin GG',       'admin@golden.local', 12000) RETURNING ID INTO v_admin;
  INSERT INTO USERS (NAME, EMAIL, MONTHLY_INCOME) VALUES ('Márcio Gastaldi','marcio@ex.com',       4500) RETURNING ID INTO v_marcio;
  INSERT INTO USERS (NAME, EMAIL, MONTHLY_INCOME) VALUES ('Usuário Demo',   'user@ex.com',         3000) RETURNING ID INTO v_demo;
  INSERT INTO USERS (NAME, EMAIL, MONTHLY_INCOME) VALUES ('Ana Silva',      'ana@ex.com',          7000) RETURNING ID INTO v_ana;
  INSERT INTO USERS (NAME, EMAIL, MONTHLY_INCOME) VALUES ('Bruno Souza',    'bruno@ex.com',        5500) RETURNING ID INTO v_bruno;
  INSERT INTO USERS (NAME, EMAIL, MONTHLY_INCOME) VALUES ('Carla Lima',     'carla@ex.com',        3800) RETURNING ID INTO v_carla;
  INSERT INTO USERS (NAME, EMAIL, MONTHLY_INCOME) VALUES ('Diego Rocha',    'diego@ex.com',        9000) RETURNING ID INTO v_diego;

  -- USER_ACCOUNTS (DEV): senha em texto "123456" (em produção, usar HASH)
  INSERT INTO USER_ACCOUNTS (USER_ID, USERNAME, PASSWORD_HASH, ROLE) VALUES (v_admin,  'admin',  '123456', 'admin');
  INSERT INTO USER_ACCOUNTS (USER_ID, USERNAME, PASSWORD_HASH, ROLE) VALUES (v_marcio, 'marcio', '123456', 'user');
  INSERT INTO USER_ACCOUNTS (USER_ID, USERNAME, PASSWORD_HASH, ROLE) VALUES (v_demo,   'user',   '123456', 'user');
  INSERT INTO USER_ACCOUNTS (USER_ID, USERNAME, PASSWORD_HASH, ROLE) VALUES (v_ana,    'ana',    '123456', 'user');
  INSERT INTO USER_ACCOUNTS (USER_ID, USERNAME, PASSWORD_HASH, ROLE) VALUES (v_bruno,  'bruno',  '123456', 'user');
  INSERT INTO USER_ACCOUNTS (USER_ID, USERNAME, PASSWORD_HASH, ROLE) VALUES (v_carla,  'carla',  '123456', 'user');
  INSERT INTO USER_ACCOUNTS (USER_ID, USERNAME, PASSWORD_HASH, ROLE) VALUES (v_diego,  'diego',  '123456', 'user');

  --------------------------------------------------------------------------------
  -- TRANSACTIONS (exemplos focados em Márcio para alimentar o gráfico)
  --------------------------------------------------------------------------------
  -- Janeiro/2025
  INSERT INTO TRANSACTIONS (USER_ID, OPERATOR, KIND, AMOUNT, OCCURRED_AT, RAW_LABEL) VALUES (v_marcio, 'PIX *BET365',     'DEPOSIT',    250, TIMESTAMP '2025-01-05 10:15:00', 'PIX BET365 12345');
  INSERT INTO TRANSACTIONS (USER_ID, OPERATOR, KIND, AMOUNT, OCCURRED_AT, RAW_LABEL) VALUES (v_marcio, 'PIX *BETNACIONAL','DEPOSIT',    180, TIMESTAMP '2025-01-20 21:03:00', 'PIX BETNACIONAL');
  INSERT INTO TRANSACTIONS (USER_ID, OPERATOR, KIND, AMOUNT, OCCURRED_AT, RAW_LABEL) VALUES (v_marcio, 'PIX *BET365',     'WITHDRAWAL', 120, TIMESTAMP '2025-01-28 18:40:00', 'SAQUE BET365');

  -- Fevereiro/2025
  INSERT INTO TRANSACTIONS (USER_ID, OPERATOR, KIND, AMOUNT, OCCURRED_AT, RAW_LABEL) VALUES (v_marcio, 'PIX *BET365',     'DEPOSIT',    300, TIMESTAMP '2025-02-02 11:00:00', 'DEP BET365');
  INSERT INTO TRANSACTIONS (USER_ID, OPERATOR, KIND, AMOUNT, OCCURRED_AT, RAW_LABEL) VALUES (v_marcio, 'PIX *BETNACIONAL','WITHDRAWAL',  90, TIMESTAMP '2025-02-12 09:25:00', 'SAQUE BETNACIONAL');

  -- Março/2025
  INSERT INTO TRANSACTIONS (USER_ID, OPERATOR, KIND, AMOUNT, OCCURRED_AT, RAW_LABEL) VALUES (v_marcio, 'PIX *BLAZE',      'DEPOSIT',    150, TIMESTAMP '2025-03-03 13:10:00', 'DEP BLAZE');
  INSERT INTO TRANSACTIONS (USER_ID, OPERATOR, KIND, AMOUNT, OCCURRED_AT, RAW_LABEL) VALUES (v_marcio, 'PIX *BET365',     'DEPOSIT',    220, TIMESTAMP '2025-03-18 20:50:00', 'DEP BET365');
  INSERT INTO TRANSACTIONS (USER_ID, OPERATOR, KIND, AMOUNT, OCCURRED_AT, RAW_LABEL) VALUES (v_marcio, 'PIX *BET365',     'WITHDRAWAL', 200, TIMESTAMP '2025-03-25 17:35:00', 'SAQUE BET365');

  -- Abril/2025
  INSERT INTO TRANSACTIONS (USER_ID, OPERATOR, KIND, AMOUNT, OCCURRED_AT, RAW_LABEL) VALUES (v_marcio, 'PIX *BETFAIR',    'DEPOSIT',    320, TIMESTAMP '2025-04-10 12:05:00', 'DEP BETFAIR');
  INSERT INTO TRANSACTIONS (USER_ID, OPERATOR, KIND, AMOUNT, OCCURRED_AT, RAW_LABEL) VALUES (v_marcio, 'PIX *BETFAIR',    'WITHDRAWAL', 140, TIMESTAMP '2025-04-22 19:20:00', 'SAQUE BETFAIR');

  -- Alguns movimentos esparsos para outros usuários (para testes do filtro)
  INSERT INTO TRANSACTIONS (USER_ID, OPERATOR, KIND, AMOUNT, OCCURRED_AT, RAW_LABEL) VALUES (v_ana,   'PIX *BET365', 'DEPOSIT',     500, TIMESTAMP '2025-03-07 09:10:00', 'DEP BET365');
  INSERT INTO TRANSACTIONS (USER_ID, OPERATOR, KIND, AMOUNT, OCCURRED_AT, RAW_LABEL) VALUES (v_bruno, 'PIX *BLAZE',  'WITHDRAWAL',  80,  TIMESTAMP '2025-03-15 16:40:00', 'SAQUE BLAZE');
  INSERT INTO TRANSACTIONS (USER_ID, OPERATOR, KIND, AMOUNT, OCCURRED_AT, RAW_LABEL) VALUES (v_carla, 'PIX *BETFAIR','DEPOSIT',     260, TIMESTAMP '2025-02-27 14:00:00', 'DEP BETFAIR');
  INSERT INTO TRANSACTIONS (USER_ID, OPERATOR, KIND, AMOUNT, OCCURRED_AT, RAW_LABEL) VALUES (v_diego, 'PIX *BET365', 'WITHDRAWAL',  95,  TIMESTAMP '2025-01-19 20:05:00', 'SAQUE BET365');

  COMMIT;
END;
/
-- fim dos dados de exemplo
--------------------------------------------------------------------------------

-- Dica: para ver rapidamente o agregado mensal (deve bater com o endpoint da API)
-- SELECT TO_CHAR(TRUNC(occurred_at,'MM'),'YYYY-MM') ym,
--        SUM(CASE WHEN UPPER(kind)='DEPOSIT'    THEN amount ELSE 0 END) deposits,
--        SUM(CASE WHEN UPPER(kind)='WITHDRAWAL' THEN amount ELSE 0 END) withdrawals
-- FROM transactions
-- WHERE user_id = :uid AND EXTRACT(YEAR FROM occurred_at)=2025
-- GROUP BY TRUNC(occurred_at,'MM')
-- ORDER BY ym;